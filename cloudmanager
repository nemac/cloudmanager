#! /usr/bin/python

import json, subprocess, sys, re, argparse, cloudmanager, os

parser = argparse.ArgumentParser();
parser.add_argument('servers', metavar='SERVER', type=str, nargs='*', help='servers to manage; defaults to all running servers')
parser.add_argument('-c', '--conf', type=str, nargs=1,
                    help='set the conf tag for the indicated server; requires exactly one SERVER arg; causes all other options to be ignored')
parser.add_argument('-p', '--provision', action='store_true',
                    help='provision the indicated server; requires exactly one SERVER arg; causes all other options to be ignored')
parser.add_argument('-u', '--users', action='store_true',
                    help='manage users on the listed servers; defaults to all running servers')
parser.add_argument('-i', '--hosts', action='store_true',
                    help='manage the /etc/hosts file on the listed servers; defaults to all running servers')
parser.add_argument('-n', '--noop', action='store_true',
                    help='do not actually do anything to modify servers -- just print the scripts that would be run on them')

args = parser.parse_args()

###
### Get the info (name, ip address, tags, etc) for all running servers
###
running_servers_info = cloudmanager.get_running_servers_info() # running_servers_info is now a dict, keyed by server name
running_server_names = running_servers_info.keys() # running_server_names is now an array of the names

###
### Validate the args.servers array.  If no servers were specified on the command line,
### default to all running servers.  Remove any servers specified on the command line
### which are not running.
###
if len(args.servers) == 0:
    args.servers = running_server_names
good_servers = []
for server in args.servers:
    if server in running_server_names:
        good_servers.append(server)
    else:
        print "Ignoring server '%s' because it is not currently running" % server,
args.servers = good_servers

if len(args.servers) == 0:
    print "No running servers found to act on."
    sys.exit(-1)


if args.conf:
    if len(args.servers) != 1:
        print "--conf requires exactly one SERVER arg"
        sys.exit(-1)
    server = args.servers[0]
    conf = args.conf[0]
    cloudmanager.system("cirrus ec2 settag %(server)s conf %(conf)s" % {
        "server" : server,
        "conf"   : conf
    })
    print "server %s set to conf %s" % (server, conf)
    sys.exit(0)


if args.provision:
    if len(args.servers) != 1:
        print "--provision requires exactly one SERVER arg"
        sys.exit(-1)
    server = args.servers[0]
    if "CLOUDMANAGER_PROVISION_DIR" not in os.environ:
        print "cloudmanager requires that the environment variable CLOUDMANAGER_PROVISION_DIR be set"
        sys.exit(-1)
    provisiondir = os.environ["CLOUDMANAGER_PROVISION_DIR"]
    if "conf" not in running_servers_info[server]['Tags']:
        print "no conf tag is set for server: %s" % server
        sys.exit(-1)
    manifest = running_servers_info[server]['Tags']['conf']
    if not os.path.exists(os.path.join(provisiondir, "puppet", manifest + ".pp")):
        print "puppet manifest '%s.pp' not found in '%s'" % (manifest, provisiondir)
        sys.exit(-1)
    print "running bootstrap script on server '%s' (making sure puppet is installed, etc)" % server
    cloudmanager.run_script_on_instance(server, scriptpath=os.path.join(provisiondir, "shell/bootstrap.sh"), noop=args.noop)
    print "transferring puppet files to server: %s" % server
    cloudmanager.system("cirrus ec2 rsync --options ' --no-owner --no-group' %(server)s %(provisiondir)s/puppet/ /etc/puppet/files" % {
        "server" : server,
        "provisiondir" : provisiondir
    })
    print "installing puppet settings file on server: %s" % server
    cloudmanager.run_script_on_instance(server, scriptpath=os.path.join(provisiondir, "shell/create-vagrant-settings.py"), args=server, noop=args.noop)
    print "applying puppet manifest %s on server: %s" % (manifest, server)
    cloudmanager.system("cirrus ec2 ssh %(server)s 'puppet apply --verbose --debug --modulepath=/etc/puppet/files/modules:/etc/puppet/modules --fileserverconfig=/etc/puppet/files/fileserver.conf /etc/puppet/files/%(manifest)s.pp'" % {
        "server" : server,
        "manifest" : manifest
    })
    sys.exit(0)

if not (args.users or args.hosts):
    parser.print_help()
    sys.exit(0)


###
### Manage users:
###

if args.users:
    userfile = "users.json"
    if "CLOUDMANAGER_USERS" in os.environ:
        userfile = os.environ["CLOUDMANAGER_USERS"]
    if not os.path.exists(userfile):
        print "user file '%s' not found" % userfile
        sys.exit(-1)

    try:
        with open(userfile, 'r') as f:
            users = json.loads(f.read())
    except Exception as e:
        print "Error reading or parsing user file '%s'\n    %s:" % (userfile, e.message)
        sys.exit(-1)

    server_users = {}
    for username in users:
        for server in users[username]["access"]:
            if server not in server_users:
                server_users[server] = []
            server_users[server].append({ "name" : username, "user" : users[username]})
    for server in args.servers:
        if server not in server_users:
            server_users[server] = []
        quoted_user_names = [("'%s'" % u["name"]) for u in server_users[server]]
        script = cloudmanager.script()
        script += """
try:
    remove_all_users_except([%s])
except Exception as e:
    print "Exception while removing users"
    print e

""" % ",".join(quoted_user_names)

        for u in server_users[server]:
            username = u["name"]
            user = u["user"]
            script += "try:\n"
            script += "    manageuser('%s', %s, [%s], [%s], '%s', '%s')\n" % (
                username,
                user["uid"],
                ",".join(("'%s'" % p) for p in user["access"][server]),
                ",".join(("'%s'" % k["key"]) for k in user["keys"]),
                re.sub(r'\'', '\\\'', user["realname"]),
                re.sub(r'\'', '\\\'', user["github-email"]),
                )
            script += "except Exception as e:\n"
            script += "    print 'Exception while managing user %s'\n" % username
            script += "    print e\n\n"
        print "managing users on server: %s" % server
        cloudmanager.run_script_on_instance(server, script=script, noop=args.noop)


###
### Manage hosts:
###

if (args.hosts):
    ip_addresses = {}
    for server in running_servers_info:
        ip_addresses[ server ] = running_servers_info[ server ][ "PrivateIP" ]

    for server in args.servers:
        script = cloudmanager.script()
        script += "\nmanage_etc_hosts_internal_ip_addresses('%s', %s)\n" % (server, ip_addresses)
        print "managing /etc/hosts on server: %s" % server
        cloudmanager.run_script_on_instance(server, script=script, noop=args.noop)
